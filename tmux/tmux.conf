# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal xterm-256color

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# Allow holding down control and tapping p/n repeatedly
bind C-p previous-window
bind C-n next-window

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# Smart pane switching with awareness of vim splits.
# Source: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l


# Easily toggle synchronization (mnemonic: e is for echo)
# Sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# Set first window to index 1 (not 0) to map more to the keyboard layout...
#set-option -g base-index 1
#set-window-option -g pane-base-index 1

# Screen like binding
unbind C-b
set -g prefix C-a
bind a send-prefix

# No escape time for vi mode
set -sg escape-time 0

# Screen like binding for last window
unbind l
bind C-a last-window

# Bigger history
set -g history-limit 50000

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# force a reload of the config file
unbind R
bind R source-file ~/.tmux.conf \; display "Reloaded!"

# Agressive Resizing
set-window-option -g aggressive-resize on

set -sg escape-time 0

# Window and Split Management
unbind =
bind = select-layout tiled
set -g pane-base-index 1
set -g base-index 1

bind | split-window -h
bind - split-window -v

set -g renumber-windows on

# source ~/.tmux/tmux-status.conf
source-file "${HOME}/.tmux-themepack/powerline/block/cyan.tmuxtheme"


# Tell if we are on a remote server
if-shell -b ' [ "$SSH_CLIENT" ] ' "set -g status-bg colour6"

# Better settings for copy
unbind [
bind Escape copy-mode

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

unbind p
bind p paste-buffer

if-shell "uname | grep -i Linux" \
  "bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'xclip -selection clipboard'"

if-shell "uname | grep -i Darwin" \
  "bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'pbcopy'"

bind-key -T copy-mode-vi 'v' send-keys -X begin-selection
#bind-key -T copy-mode-vi 'r' send-keys -X rectangle-toggle

# Mouse optimisiation
#set-option  -g mouse on
#mouse-select-pane on
#unbind-key MouseDown2Pane

# Kube-tmux
# https://github.com/jonmosco/kube-tmux
#set -g status-right "#(/bin/bash $HOME/.tmux/kube.tmux 250 red cyan)"
set -g @themepack 'powerline/block/cyan'

