# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Disable automatic oh-my-zsh updates
# zstyle ':omz:update' mode disabled  # disable automatic updates

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="false"

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git fzf brew docker docker-compose httpie jira kubectl python rust sublime virtualenv kubectl kube-ps1 gh gitignore golang helm postgres sudo tmux databricks)

# Load the oh-my-zsh configs
source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"
# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Rust cargo
. "$HOME/.cargo/env"

export CLICOLOR=1
export EDITOR="nvim"
export VISUAL="$EDITOR"

alias vim="nvim"
alias vi="nvim"
alias oldvim="vim"

# Other bin paths
export LOCAL_BIN="${HOME}/.local/bin"
if [[ -d "${LOCAL_BIN}" && ! -L "${LOCAL_BIN}" ]] ; then
  export PATH="$PATH:$LOCAL_BIN"
fi
export BREW_BIN="/opt/homebrew/bin"
if [[ -d "${BREW_BIN}" && ! -L "${BREW_BIN}" ]] ; then
  export PATH=$PATH:$BREW_BIN
  export PATH=$BREW_BIN:$PATH
fi

# General aliases
alias ls="ls -a --color=auto"
alias ll='ls -lhA'
alias mkdir='mkdir -p -v'
alias recent="ls -lAt | head"
alias rg='rg --hidden'

##########################
# kubernetes configuration
##########################

# ergonomoice kubectl alias
alias k='kubectl'

# kubectl get commands
alias kg="kubectl get"
alias kgp="kubectl get pods"
alias kga="kubectl get all"
alias kgn="kubectl get nodes"
alias kgd="kubectl get deployments"
alias kgs="kubectl get services"
alias kgpv="kubectl get pv"
alias kgpc="kubectl get pvc"
alias kgds="kubectl get daemonsets"
alias kgppv="kubectl get pv,pvc"
alias kgaa="kubectl get all --all-namespaces"
alias kgnt="kubectl get nodes -o=custom-columns=NAME:.metadata.name,TAINTS:.spec.taints"

# kubectl context and namespaces commands
alias kctx='kubectx'
alias kns="kubens"

# kubectl commands for dealing with manifests
alias kaf="kubectl apply -f"
alias kcf="kubectl create -f"
alias kdf="kubectl delete -f"
alias keti="kubectl exec -ti"

# kubectl resource commands
alias kd="kubectl describe"
alias kdp="kubectl describe pods"
alias ke="kubectl edit"
alias kdel="kubectl delete"

# dashbaord
alias kdash="kubectl --namespace kube-dashboard port-forward svc/kube-dashboard-kong-proxy 8443:443"

# kubernetes krew plugin
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"


########################
# history configurations
########################

export HISTSIZE=10000 # Keep 10000 lines in session history
export HISTFILESIZE=1000000 # Truncate file at 1000,000 lines
export SAVEHIST=1000000 # Truncate file at 1000,000 lines
setopt share_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_verify
# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups:ignorespace:erasedups
export HISTIGNORE="&:ls:ll:la:l:pwd:exit:clear:gs:fg:gl"
# Don't overwrite history if using multiple bash sessions
# setopt -s histappend
# Don't immediately execute command when using history substitution
# setopt -s histverify

####################
# git configurations
####################

# P.S. Install difftastic and set the diff in ~/.gitconfig to external for best results

# Set git pager to not show if lines are less than a full page.
PAGER="${PAGER} -X -F"

alias g=git
alias ginit='git init'
alias gp='git push'
alias gpf='git push --force-with-lease'
alias gpl='git pull'
alias gdl='git -c diff.external=difft log -p --ext-diff'
alias gds='git diff --ext-diff --staged'
alias gdc='git show --ext-diff'
alias gshow='git show --ext-diff'
alias gc='git commit -v'
alias gca='git commit --amend -v'
alias gcm='git commit -m'
alias gcob='git checkout -b'
alias glg='git log --pretty=format:"%h %s" --graph'
alias glp="git log --pretty=oneline"
alias glf="git log --reverse --abbrev-commit --format='%Cgreen%h: %s%Creset %n%n%b' origin/master...HEAD"
alias grb='git rebase'
alias gbranch='git branch'
alias gstash='git stash'
alias greset='git reset'
alias gclone='git clone'
alias gfetch='git fetch'
alias gprune="git branch -r | awk '{print \$1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print \$1}' | xargs git branch -d "
alias shac="git rev-parse HEAD | tr -d '\\n' | pbcopy"
eval "$(scmpuff init -s)"
eval "$(zoxide init zsh)"
alias git-prunebranches='[ "$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)" == "master" ] && git branch --merged master | grep -v "\* master" | xargs -n 1 git branch -d'

# Disable creation of __pycache__ folder
export PYTHONDONTWRITEBYTECODE=1

# aranist (`arc` command)
if [[ -f /var/www/phorge.mosab.me/arcanist/bin/arc ]] then;
  export PATH="$PATH:/var/www/phorge.mosab.me/arcanist/bin/"
fi

########################
# shell ux configuration
########################

# autoload -U colors && colors
# PS1="%{$fg[green]%}%n%{$reset_color%}@%{$fg[cyan]%}%m %{$fg[yellow]%}%~ %{$reset_color%}%% "
# PROMPT='$(kube_ps1)'$PROMPT # or RPROMPT='$(kube_ps1)'

# Powerlevel10k
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
source ~/powerlevel10k/powerlevel10k.zsh-theme
if [[ -f ~/.p10k.zsh ]] then; 
  source ~/.p10k.zsh
fi

###############################
# autocompletion configurations
###############################

autoload -Uz compinit
compinit

# autoload -U +X bashcompinit && bashcompinit
# complete -o nospace -C /usr/bin/terraform terraform

# kubernetes autocompletion
source <(kubectl completion zsh)  # set up autocomplete in zsh into the current shell
[[ $commands[kubectl] ]] && source <(kubectl completion zsh)
export KUBECONFIG=~/.kube/config

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion


# Mise
eval "$(${HOME}/.local/bin/mise activate zsh)"

# If you need to have libpq first in your PATH, run:
export PATH="/opt/homebrew/opt/libpq/bin:$PATH"

# For compilers to find libpq you may need to set:
export LDFLAGS="-L/opt/homebrew/opt/libpq/lib"
export CPPFLAGS="-I/opt/homebrew/opt/libpq/include"
eval "$(atuin init zsh)"
